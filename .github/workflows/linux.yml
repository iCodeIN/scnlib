name: linux

on: [push, pull_request]

env:
  APT_INSTALL: sudo apt-get install -yq --no-install-suggests --no-install-recommends --force-yes

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # gcc 10
          - cxx: g++-10
            os: ubuntu-20.04
            std: 20
          # gcc 9
          - cxx: g++-9
            os: ubuntu-20.04
            std: 20
          # gcc 8
          - cxx: g++-8
            os: ubuntu-20.04
            std: 20
          # gcc 7
          - cxx: g++-7
            os: ubuntu-20.04
            std: 17
          # gcc 6
          - cxx: g++-6
            os: ubuntu-16.04
            std: 14
            install_cmd: ${APT_INSTALL} g++-6
          # gcc 5
          - cxx: g++-5
            os: ubuntu-16.04
            std: 14

          # clang 10
          - cxx: clang++-10
            os: ubuntu-20.04
            std: 20
          # clang 9
          - cxx: clang++-9
            os: ubuntu-20.04
            std: 20
          # clang 6.0
          - cxx: clang++-6.0
            os: ubuntu-16.04
            std: 17

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create Build Environment
        run: |
          sudo locale-gen en_US.UTF-8
          sudo locale-gen fi_FI.UTF-8
          sudo update-locale
          sudo locale -a
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get --allow-unauthenticated -yq update
          ${{ matrix.install_cmd }}
          mkdir ${{ runner.workspace }}/build

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        env:
          CXX: ${{ matrix.cxx }}
          MAX_STD: ${{ matrix.std }}
        shell: bash
        run: |
          run_cmake() {
            cmake -DSCN_BUILD_LOCALIZED_TESTS=ON -DSCN_WERROR=ON \
                  "$@" \
                  $GITHUB_WORKSPACE || return 1
            return 0
          }
          run_test() {
            ctest --output-on-failure "$@" || return 1
            return 0
          }
          run_build() {
            run_cmake -DCMAKE_BUILD_TYPE=Debug "$@" || return 1
            make -k -j || return 1
            run_test -C Debug || return 1
            make clean || return 1

            run_cmake -DCMAKE_BUIL || return 1D_TYPE=Release "$@"
            make -k -j || return 1
            run_test -C Release || return 1
            make clean || return 1
            return 0
          }

          standards="11 14 17 20"
          for std in $standards; do
            run_build -DCMAKE_CXX_STANDARD=$std
            if [[ "${std}" == "${MAX_STD}" ]]; then
              break
            fi
          done

